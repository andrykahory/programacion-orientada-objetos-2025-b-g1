{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN8vCm/Jo16aug+hX422G5L"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"OQuIy7RTsCFS","executionInfo":{"status":"ok","timestamp":1757219306972,"user_tz":300,"elapsed":4374,"user":{"displayName":"Andry kahory Vieda trujillo","userId":"11159778211510694030"}},"outputId":"83724153-08dd-44be-b169-a7a348028fd7"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","====== Biblioteca Persistente ======\n","1. Registrar socio\n","2. Listar socios\n","3. Registrar material\n","4. Listar materiales\n","5. Prestar\n","6. Devolver\n","7. Reporte: Activos\n","8. Reporte: Vencidos\n","0. Salir\n","====================================\n","\n","Opción: 0\n","¡Sesion finalizada!\n"]}],"source":["import json\n","from dataclasses import dataclass, asdict\n","from datetime import datetime, timedelta\n","from pathlib import Path\n","\n","# ===================== Configuración =====================\n","ARCHIVO_SOCIOS = Path(\"socios.json\")\n","ARCHIVO_MATERIALES = Path(\"materiales.json\")\n","ARCHIVO_PRESTAMOS = Path(\"prestamos.json\")\n","\n","DIAS_LIMITE = 7\n","MULTA_DIA = 1500\n","\n","\n","# ===================== Modelos =====================\n","@dataclass\n","class Socio:\n","    documento: str\n","    nombre: str\n","\n","\n","@dataclass\n","class Material:\n","    titulo: str\n","    categoria: str\n","    stock: int\n","\n","\n","@dataclass\n","class Prestamo:\n","    doc: str\n","    titulo: str\n","    fecha: str   # guardamos como string para JSON\n","\n","\n","# ===================== Persistencia =====================\n","class BaseDatos:\n","    def __init__(self):\n","        self.socios: list[Socio] = []\n","        self.materiales: list[Material] = []\n","        self.prestamos: list[Prestamo] = []\n","        self.cargar_datos()\n","\n","    def cargar_datos(self):\n","        if ARCHIVO_SOCIOS.exists():\n","            self.socios = [Socio(**d) for d in json.loads(ARCHIVO_SOCIOS.read_text())]\n","        if ARCHIVO_MATERIALES.exists():\n","            self.materiales = [Material(**d) for d in json.loads(ARCHIVO_MATERIALES.read_text())]\n","        if ARCHIVO_PRESTAMOS.exists():\n","            self.prestamos = [Prestamo(**d) for d in json.loads(ARCHIVO_PRESTAMOS.read_text())]\n","\n","    def guardar_datos(self):\n","        ARCHIVO_SOCIOS.write_text(json.dumps([asdict(s) for s in self.socios], indent=2, ensure_ascii=False))\n","        ARCHIVO_MATERIALES.write_text(json.dumps([asdict(m) for m in self.materiales], indent=2, ensure_ascii=False))\n","        ARCHIVO_PRESTAMOS.write_text(json.dumps([asdict(p) for p in self.prestamos], indent=2, ensure_ascii=False))\n","\n","\n","# ===================== Lógica de negocio =====================\n","class GestorPrestamos:\n","    def __init__(self, db: BaseDatos):\n","        self.db = db\n","\n","    def registrar_socio(self, nombre, doc):\n","        if any(s.documento == doc for s in self.db.socios):\n","            raise ValueError(\"Ya existe un socio con ese documento.\")\n","        self.db.socios.append(Socio(doc, nombre))\n","        self.db.guardar_datos()\n","\n","    def registrar_material(self, titulo, categoria, stock):\n","        if any(m.titulo == titulo for m in self.db.materiales):\n","            raise ValueError(\"Ese material ya existe.\")\n","        self.db.materiales.append(Material(titulo, categoria, stock))\n","        self.db.guardar_datos()\n","\n","    def prestar(self, doc, titulo):\n","        socio = next((s for s in self.db.socios if s.documento == doc), None)\n","        if not socio:\n","            raise ValueError(\"El socio no existe.\")\n","\n","        material = next((m for m in self.db.materiales if m.titulo == titulo), None)\n","        if not material:\n","            raise ValueError(\"El material no existe.\")\n","        if material.stock <= 0:\n","            raise ValueError(\"Sin ejemplares disponibles.\")\n","\n","        material.stock -= 1\n","        self.db.prestamos.append(Prestamo(doc, titulo, datetime.now().isoformat()))\n","        self.db.guardar_datos()\n","\n","    def devolver(self, doc, titulo):\n","        prestamo = next((p for p in self.db.prestamos if p.doc == doc and p.titulo == titulo), None)\n","        if not prestamo:\n","            raise ValueError(\"Ese préstamo no existe.\")\n","\n","        self.db.prestamos.remove(prestamo)\n","        material = next(m for m in self.db.materiales if m.titulo == titulo)\n","        material.stock += 1\n","        self.db.guardar_datos()\n","\n","        return self.calcular_multa(prestamo)\n","\n","    def calcular_multa(self, prestamo: Prestamo):\n","        fecha_prestamo = datetime.fromisoformat(prestamo.fecha)\n","        limite = fecha_prestamo + timedelta(days=DIAS_LIMITE)\n","        hoy = datetime.now()\n","        if hoy <= limite:\n","            return 0\n","        atraso = (hoy - limite).days\n","        return atraso * MULTA_DIA\n","\n","    def prestamos_activos(self):\n","        return self.db.prestamos\n","\n","    def prestamos_vencidos(self):\n","        vencidos = []\n","        for p in self.db.prestamos:\n","            multa = self.calcular_multa(p)\n","            if multa > 0:\n","                vencidos.append((p, multa))\n","        return vencidos\n","\n","\n","# ===================== Interfaz CLI =====================\n","def pedir_texto(msg):\n","    return input(msg).strip()\n","\n","\n","def pedir_numero(msg):\n","    while True:\n","        try:\n","            return int(input(msg))\n","        except ValueError:\n","            print(\"Debe ser un número válido.\")\n","\n","\n","def menu():\n","    print(\"\"\"\n","====== Biblioteca Persistente ======\n","1. Registrar socio\n","2. Listar socios\n","3. Registrar material\n","4. Listar materiales\n","5. Prestar\n","6. Devolver\n","7. Reporte: Activos\n","8. Reporte: Vencidos\n","0. Salir\n","====================================\n","\"\"\")\n","\n","\n","def main():\n","    db = BaseDatos()\n","    gestor = GestorPrestamos(db)\n","\n","    while True:\n","        menu()\n","        op = pedir_texto(\"Opción: \")\n","\n","        try:\n","            if op == \"1\":\n","                nombre = pedir_texto(\"Nombre: \")\n","                doc = pedir_texto(\"Documento: \")\n","                gestor.registrar_socio(nombre, doc)\n","                print(\"✔ Socio agregado.\")\n","            elif op == \"2\":\n","                for s in db.socios:\n","                    print(f\"- {s.nombre} (doc {s.documento})\")\n","            elif op == \"3\":\n","                titulo = pedir_texto(\"Título: \")\n","                cat = pedir_texto(\"Categoría (Libro/Revista): \")\n","                stock = pedir_numero(\"Cantidad: \")\n","                gestor.registrar_material(titulo, cat, stock)\n","                print(\"✔ Material registrado.\")\n","            elif op == \"4\":\n","                for m in db.materiales:\n","                    print(f\"- {m.categoria}: {m.titulo} (stock: {m.stock})\")\n","            elif op == \"5\":\n","                doc = pedir_texto(\"Documento socio: \")\n","                titulo = pedir_texto(\"Título: \")\n","                gestor.prestar(doc, titulo)\n","                print(\"✔ Préstamo realizado.\")\n","            elif op == \"6\":\n","                doc = pedir_texto(\"Documento socio: \")\n","                titulo = pedir_texto(\"Título: \")\n","                multa = gestor.devolver(doc, titulo)\n","                print(f\"✔ Devolución registrada. Multa: ${multa}\")\n","            elif op == \"7\":\n","                if not db.prestamos:\n","                    print(\"(sin préstamos)\")\n","                for p in db.prestamos:\n","                    socio = next(s for s in db.socios if s.documento == p.doc)\n","                    print(f\"- {socio.nombre} tiene '{p.titulo}' desde {p.fecha[:10]}\")\n","            elif op == \"8\":\n","                vencidos = gestor.prestamos_vencidos()\n","                if not vencidos:\n","                    print(\"(sin vencidos)\")\n","                for p, multa in vencidos:\n","                    socio = next(s for s in db.socios if s.documento == p.doc)\n","                    print(f\"- {socio.nombre} debe '{p.titulo}' con multa de ${multa}\")\n","            elif op == \"0\":\n","                print(\"¡Sesion finalizada!\")\n","                break\n","            else:\n","                print(\"Opción inválida.\")\n","        except Exception as e:\n","            print(f\"✖ Error: {e}\")\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n"]}]}